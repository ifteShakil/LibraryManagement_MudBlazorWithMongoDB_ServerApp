@page "/Category"

@using MudBlazorWebApp5.Models
@inject MudBlazorWebApp5.IService.ICategoryService CategoryService
@inject IDialogService DialogService
@inject NavigationManager nav
@inject ILocalStorageService _localStorage

@if (Categories != null)
{
    <div>

        <MudButton OnClick="@((e) => CreateDialog(topCenter))" Variant="Variant.Filled" Color="Color.Default">Add Category</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Default" Class="ml-1">Export</MudButton>
    </div>

    <MudTable Items="Categories" Filter="new Func<Category,bool>(FilterFunc1)" Hover="true" SortLabel="Sort By" Elevation="0">
        <ToolBarContent>
            <MudText Typo="Typo.h6">data List</MudText>
            <MudSpacer />

            <MudTextField @bind-Value="searchString1" Placeholder="Search name or Company name" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>

        </ToolBarContent>

        <HeaderContent>
            <MudTh>SL No</MudTh>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Category, object>(x=>x.CategoryName)">Category Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Category, object>(x=>x.DDCCode)"> DDCCode</MudTableSortLabel></MudTh>
            <MudTh>IsActive</MudTh>
            <MudTh>Action</MudTh>
        </HeaderContent>

        <RowTemplate>
            <MudTd DataLabel="serial">@GetRowNumber(context)</MudTd>
                <MudTd DataLabel="CategoryName">@context.CategoryName</MudTd>
                <MudTd DataLabel="DDCCode">@context.DDCCode</MudTd>
                <MudTd DataLabel="is Active">@context.IsActive</MudTd>
                <MudTd>
                    <MudFab OnClick="@((e) => EditDialog(topCenter, context.CategoryId))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
                    <MudFab OnClick="@(() => {DeleteDialog(context.CategoryId);})" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
                </MudTd>

            </RowTemplate>

            <PagerContent>
                <MudTablePager PageSizeOptions="new int[]{3, 6}" />
                <MudSpacer />
                @* <MudPagination Rectangular="true" Variant="Variant.Filled" Count="3" Class="my-4" /> *@
            </PagerContent>
        </MudTable>
}
else
{
    nav.NavigateTo("/login");
}


@code {
    // get token
    // private bool loggedInUser;

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    //         loggedInUser = await IsUserLoggedIn();
    //         await Task.Delay(1000);
    //         StateHasChanged();
    //     }
    // }
    // private async Task<bool> IsUserLoggedIn()
    // {
    //     // check if there's a token in local storage
    //     var token = await _localStorage.GetItemAsync<string>("authToken");
    //     return !string.IsNullOrEmpty(token);
    // }

    private string searchString1 = "";

    //get list
    private IEnumerable<Category> Categories = new List<Category>();

    protected override async Task OnInitializedAsync()
    {
        Categories = (await CategoryService.GetCategories()).ToList();
    }

    // Category Serial No
    public int? GetRowNumber(object element) =>
        Categories?.TakeWhile(x => x != element).Count() + 1;


    // dialog format
    DialogOptions topCenter = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true, Position = DialogPosition.TopCenter };

    // Create Book Floor Dialog

    private void CreateDialog(DialogOptions options)
    {
        DialogService.Show<CreateCategory>("Create Category", options);
    }

    // Edit Publisher Dialog
    private void EditDialog(DialogOptions options, string id)
    {
        var parameters = new DialogParameters<EditCategory>();
        parameters.Add(x => x.CategoryId, id);
        
        DialogService.Show<EditCategory>("Edit Category", parameters, options);
    }

    // Delete Dialog
    private async void DeleteDialog(string id)
    {
        var parameters = new DialogParameters<DeleteCategory>();
        parameters.Add(x => x.ContentText, "Do you really want to delete these records? This process cannot be undone.");
        parameters.Add(x => x.ButtonText, "Delete");
        parameters.Add(x => x.Color, Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var res = await DialogService.ShowAsync<DeleteCategory>("Delete", parameters, options);
        var d = await res.Result;
        var error = "error";
        if (!d.Cancelled)
        {
            //delete data
            await CategoryService.DeleteCategory(id);
        }
        else
        {
            //
            Console.WriteLine(error);
        }
    }

    //Filter
    private bool FilterFunc1(Category element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Category element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.CategoryName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.DDCCode.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}